
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.4.1
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "6.4.1",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DepartmentScalarFieldEnum = {
  departmentId: 'departmentId',
  departmentName: 'departmentName',
  departmentEmail: 'departmentEmail',
  location: 'location',
  headOfDepartment: 'headOfDepartment',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  name: 'name',
  role: 'role'
};

exports.Prisma.DoctorScalarFieldEnum = {
  doctorId: 'doctorId',
  doctorName: 'doctorName',
  specialty: 'specialty',
  doctorImg: 'doctorImg',
  gender: 'gender',
  contactNumber: 'contactNumber',
  email: 'email',
  departmentId: 'departmentId'
};

exports.Prisma.NurseScalarFieldEnum = {
  nurseId: 'nurseId',
  nurseName: 'nurseName',
  nurseImg: 'nurseImg',
  gender: 'gender',
  contactNumber: 'contactNumber',
  qualification: 'qualification',
  email: 'email',
  departmentId: 'departmentId'
};

exports.Prisma.PatientScalarFieldEnum = {
  patientId: 'patientId',
  patientName: 'patientName',
  age: 'age',
  patientImg: 'patientImg',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  postalCode: 'postalCode',
  gender: 'gender',
  contactNumber: 'contactNumber',
  blood_type: 'blood_type',
  chronic_diseases: 'chronic_diseases',
  last_visit_date: 'last_visit_date'
};

exports.Prisma.MedicalReportScalarFieldEnum = {
  medicalReportId: 'medicalReportId',
  reportDate: 'reportDate',
  testResults: 'testResults',
  notes: 'notes',
  patientId: 'patientId',
  patientName: 'patientName',
  doctorId: 'doctorId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  appointmentCode: 'appointmentCode',
  appointmentDate: 'appointmentDate',
  appointmentTime: 'appointmentTime',
  doctorId: 'doctorId',
  patientId: 'patientId',
  appointmentType: 'appointmentType',
  appointmentStatus: 'appointmentStatus'
};

exports.Prisma.MedicineScalarFieldEnum = {
  medicineId: 'medicineId',
  medicineName: 'medicineName',
  brand: 'brand',
  medicineImg: 'medicineImg',
  dosage_form: 'dosage_form',
  unit_price: 'unit_price',
  quantity_in_stock: 'quantity_in_stock',
  expiry_date: 'expiry_date'
};

exports.Prisma.PaymentScalarFieldEnum = {
  paymentId: 'paymentId',
  paymentDate: 'paymentDate',
  patientId: 'patientId'
};

exports.Prisma.MedicinePaymentDetailsScalarFieldEnum = {
  medicinePaymentDetailsId: 'medicinePaymentDetailsId',
  paymentId: 'paymentId',
  medicineId: 'medicineId',
  getQty: 'getQty',
  price: 'price',
  totalPrice: 'totalPrice'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.DepartmentOrderByRelevanceFieldEnum = {
  departmentId: 'departmentId',
  departmentName: 'departmentName',
  departmentEmail: 'departmentEmail',
  location: 'location',
  headOfDepartment: 'headOfDepartment',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  name: 'name',
  role: 'role'
};

exports.Prisma.DoctorOrderByRelevanceFieldEnum = {
  doctorId: 'doctorId',
  doctorName: 'doctorName',
  specialty: 'specialty',
  doctorImg: 'doctorImg',
  gender: 'gender',
  contactNumber: 'contactNumber',
  email: 'email',
  departmentId: 'departmentId'
};

exports.Prisma.NurseOrderByRelevanceFieldEnum = {
  nurseId: 'nurseId',
  nurseName: 'nurseName',
  nurseImg: 'nurseImg',
  gender: 'gender',
  contactNumber: 'contactNumber',
  qualification: 'qualification',
  email: 'email',
  departmentId: 'departmentId'
};

exports.Prisma.PatientOrderByRelevanceFieldEnum = {
  patientId: 'patientId',
  patientName: 'patientName',
  age: 'age',
  patientImg: 'patientImg',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  postalCode: 'postalCode',
  gender: 'gender',
  contactNumber: 'contactNumber',
  blood_type: 'blood_type',
  chronic_diseases: 'chronic_diseases',
  last_visit_date: 'last_visit_date'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.MedicalReportOrderByRelevanceFieldEnum = {
  medicalReportId: 'medicalReportId',
  reportDate: 'reportDate',
  notes: 'notes',
  patientId: 'patientId',
  patientName: 'patientName',
  doctorId: 'doctorId'
};

exports.Prisma.AppointmentOrderByRelevanceFieldEnum = {
  appointmentCode: 'appointmentCode',
  appointmentDate: 'appointmentDate',
  appointmentTime: 'appointmentTime',
  doctorId: 'doctorId',
  patientId: 'patientId',
  appointmentType: 'appointmentType',
  appointmentStatus: 'appointmentStatus'
};

exports.Prisma.MedicineOrderByRelevanceFieldEnum = {
  medicineId: 'medicineId',
  medicineName: 'medicineName',
  brand: 'brand',
  medicineImg: 'medicineImg',
  dosage_form: 'dosage_form',
  unit_price: 'unit_price',
  expiry_date: 'expiry_date'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  paymentId: 'paymentId',
  paymentDate: 'paymentDate',
  patientId: 'patientId'
};

exports.Prisma.MedicinePaymentDetailsOrderByRelevanceFieldEnum = {
  paymentId: 'paymentId',
  medicineId: 'medicineId',
  price: 'price',
  totalPrice: 'totalPrice'
};


exports.Prisma.ModelName = {
  Department: 'Department',
  User: 'User',
  Doctor: 'Doctor',
  Nurse: 'Nurse',
  Patient: 'Patient',
  MedicalReport: 'MedicalReport',
  Appointment: 'Appointment',
  Medicine: 'Medicine',
  Payment: 'Payment',
  MedicinePaymentDetails: 'MedicinePaymentDetails'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
